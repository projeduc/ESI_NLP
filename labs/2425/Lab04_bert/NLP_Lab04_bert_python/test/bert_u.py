#!/usr/bin/env python
# -*- coding: utf-8 -*-

# This is a part of NLP labs, ESI, Algiers 
# --------------------------------------------------------------------
# Copyright (C) 2025 Abdelkrime Aries (kariminfo0@gmail.com)
# 
# Autors: 
#        - 2025 Abdelkrime Aries (kariminfo0@gmail.com)
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
#  
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os, sys
import pytest
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from mybert.bert import *

def get_mha():
    mha = MultiheadAttention(6, 2)

    mha.q_proj.w = [
        [0.1, 0.2, 0.3, 0.4, 0.5, 0.6],
        [0.0, 0.1, 0.2, 0.3, 0.4, 0.5],
        [-0.1, 0.0, 0.1, 0.2, 0.3, 0.4],
        [-0.2, -0.1, 0.0, 0.1, 0.2, 0.3],
        [-0.3, -0.2, -0.1, 0.0, 0.1, 0.2],
        [-0.4, -0.3, -0.2, -0.1, 0.0, 0.1]
    ]
    mha.q_proj.b = [0.1, 0.1, 0.1, 0.1, 0.1, 0.1]

    mha.k_proj.w = [
        [-0.1, 0.2, 0.4, 0.5, -0.5, 0.3],
        [0.1, 0.1, 0.2, 0.2, 0.2, 0.2],
        [-0.1, -0.1, -0.1, 0.3, -0.3, 0.3],
        [-0.1, -0.1, 0.1, 0.1, -0.2, 0.2],
        [-0.3, -0.3, -0.1, 0.3, 0.3, 0.3],
        [-0.1, -0.1, 0.1, 0.1, 0.1, 0.1]
    ]
    mha.k_proj.b = [0.1, 0.2, 0.1, 0.2, 0.1, 0.2]

    mha.v_proj.w = [
        [0.6, 0.5, 0.4, 0.4, 0.5, 0.6],
        [0.5, 0.4, 0.3, 0.3, 0.4, 0.5],
        [0.4, 0.3, 0.2, 0.2, 0.3, 0.4],
        [0.3, 0.2, 0.1, 0.1, 0.2, 0.3],
        [0.2, 0.1, 0.0, 0.0, 0.1, 0.2],
        [0.1, 0.0, -0.1, -0.1, 0.0, 0.1]
    ]
    mha.v_proj.b = [-0.1, 0.1, 0.2, 0.3, 0.1, -0.1]

    mha.o_proj.w = [
        [0.1, 0.2, 0.3, 0.4, 0.5, 0.6],
        [0.0, 0.1, 0.2, 0.3, 0.4, 0.5],
        [-0.1, 0.0, 0.1, 0.2, 0.3, 0.4],
        [-0.2, -0.1, 0.0, 0.1, 0.2, 0.3],
        [-0.3, -0.2, -0.1, 0.0, 0.1, 0.2],
        [-0.4, -0.3, -0.2, -0.1, 0.0, 0.1]
    ]
    mha.o_proj.b = [0.1, 0.1, 0.1, 0.1, 0.1, 0.1]

    return mha

def get_bb():
    bb = BertBlock(6, 2, 4)
    bb.attention = get_mha()

    bb.ffn1.w = [
        [0.8, 0.5, 0.3, 0.2, 0.3, 0.4], 
        [0.7, 0.1, 0.9, 0.5, 0.3, 0.5], 
        [0.8, 0.9, 0.6, 0.1, 0.3, 0.6], 
        [0.2, 0.9, 0.6, 0.2, 0.3, 0.4]
    ]

    bb.ffn2.w = [
        [1.0, 0.6, 0.9, 0.6], 
        [0.9, 0.7, 0.7, 0.4], 
        [0.8, 0.6, 0.1, 0.3], 
        [0.8, 0.4, 0.4, 0.6], 
        [0.1, 0.3, 0.1, 0.4], 
        [0.8, 0.2, 0.7, 0.8]
    ]

    return bb

def get_b():
    b = Bert(10, 5, 6, 2, 4, 2)
    b.blocks[0] = get_bb()
    b.blocks[1] = get_bb()

    b.token_embedding.w = [ # 10 diffrnt zords
        [1, 0.5, 0.25, 0.1, 0.1, 0.05],
        [0.5, 0.5, 0.5, 0.25, 0.25, 0],
        [1.1, 0.1, 0.1, 0.1, 0.1, 0.5],
        [0.25, 0.25, 0.25, 0.25, 0.5, 0.5],
        [0.2, 0.2, 0.2, 0.2, 0.2, 1],
        [1.2, 0, 0, 0, 0, 0.8],
        [0.3, 0.2, 0.3, 0.2, 0.6, 0.4],
        [0.1, 0.1, 0.2, 0.2, 0.3, 1.1],
        [0.1, 0.2, 0.3, 0.4, 0.5, 0.5],
        [0.6, 0.5, 0.4, 0.3, 0.2, 0]
    ]

    b.position_embedding.w = [ # 5 possibl positions
        [0.1, 0.1, 0.1, 0.1, 0.1, 0.1],
        [0.2, 0.2, 0.2, 0.2, 0.2, 0.2],
        [0.3, 0.3, 0.3, 0.3, 0.3, 0.3],
        [0.4, 0.4, 0.4, 0.4, 0.4, 0.4],
        [0.5, 0.5, 0.5, 0.5, 0.5, 0.5]
    ]

    b.segment_embedding.w = [ # 2 sgmnts
        [0, 0.1, 0, 0.1, 0, 0.1],
        [0.2, 0, 0.2, 0, 0.2, 0]
    ]

    return b


Q_mha = [
        [[0, 1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6], [4, 3, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1]],
        [[0, 1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6], [4, 3, 2, 1, 0, 1], [1, 1, 1, 1, 1, 1]]
    ]

K_mha = [
        [[0, 3, 2, 1, 0, 1], [2, 2, 2, 1, 2, 1], [3, 0, 2, 1, 0, 3], [2, 1, 2, 1, 1, 0]],
        [[0, 3, 2, 1, 0, 1], [2, 2, 2, 1, 2, 1], [3, 0, 2, 1, 0, 3], [2, 1, 2, 1, 1, 0]],
    ]

V_mha = [
        [[2, 3, 1, 1, 0, 1], [2, 1, 2, 3, 4, 5], [3, 2, 2, 2, 0, 5], [2, 2, 3, 4, 5, 2]],
        [[0, 3, 2, 1, 0, 1], [2, 2, 2, 1, 2, 1], [3, 0, 2, 1, 0, 3], [2, 1, 2, 1, 1, 0]],
    ]

Y_mha = [
    [
        [5.125915619253962, 3.0077613329404334, 0.8896070466269055, -1.2285472396866228, -3.346701526000151, -5.4648558123136795], 
        [5.154443655682312, 3.0102915072355407, 0.8661393587887688, -1.2780127896580025, -3.4221649381047743, -5.566317086551546], 
        [4.599772871965113, 2.6865533829353505, 0.7733338939055869, -1.1398855951241764, -3.0531050841539393, -4.966324573183703], 
        [4.786966604781819, 2.805120689953771, 0.8232747751257231, -1.1585711397023246, -3.1404170545303725, -5.12226296935842]
    ], 
    [
        [3.2670360759143033, 1.8881186140078439, 0.5092011521013835, -0.8697163098050763, -2.2486337717115363, -3.627551233617997], 
        [3.2727828587907344, 1.8829713659093976, 0.49315987302806086, -0.896651619853276, -2.2864631127346122, -3.67627460561595], 
        [2.735519166558244, 1.532771703048041, 0.3300242395378379, -0.8727232239723651, -2.0754706874825684, -3.278218150992771], 
        [2.899831510362772, 1.6493796127306135, 0.3989277150984552, -0.8515241825337034, -2.1019760801658616, -3.35242797779802]
    ]
]


dY_mha = [
    [
        [-3, 1, 2, 3, 4, 2], 
        [-2, -1, 1.5, 3, -2, 5], 
        [-2.5, 2, 2, 3, 2, 2], 
        [-2.5, -0.5, -1, 3, 1, 2]
    ], 
    [
        [-2.5, -0.5, 2, 2.5, 3.5, 5.5], 
        [1.5, -1.5, 0.5, 1, 2, 7], 
        [-1, -0.5, 1.5, 2.5, 3.5, 2.5], 
        [6, -1, -1, -2.5, 3.5, 2]
    ]
]

dQ_mha = [
    [
        [0.12025037094216727, 0.01548461861527969, -0.0892811337116079, -0.1940468860384955, -0.298812638365383, -0.40357839069227064], 
        [0.1518293170123555, 0.05515414183758327, -0.04152103333718892, -0.1381962085119611, -0.23487138368673333, -0.33154655886150547], 
        [0.14833830830358338, 0.18432256498018076, 0.22030682165677817, 0.2562910783333756, 0.29227533500997294, 0.32825959168657043], 
        [0.21475400029300534, 0.22826924457579706, 0.24178448885858875, 0.25529973314138044, 0.2688149774241721, 0.2823302217069638]
    ], 
    [
        [0.11676376026814468, 0.032536948001512786, -0.05168986426511914, -0.135916676531751, -0.22014348879838294, -0.3043703010650148], 
        [0.019932005277377728, -0.014491022091721616, -0.04891404946082097, -0.08333707682992031, -0.11776010419901967, -0.15218313156811905], 
        [0.07737876963353801, 0.02404791063576398, -0.029282948362010078, -0.08261380735978407, -0.13594466635755814, -0.18927552535533218], 
        [-0.13051516106676173, -0.08465440607810659, -0.03879365108945147, 0.007067103899203654, 0.05292785888785878, 0.09878861387651389]
    ]
]

dK_mha = [
    [
        [-2.4617789511152717, 7.17777245239725, 16.085932551899806, 25.42012509966774, -16.005630365004905, 19.071252700440134], 
        [0.23006558635673577, -0.37321568384463705, -1.025806933958764, -1.5308769441781385, 0.9118008921840197, -1.1612910275554666], 
        [2.196975802202572, -6.452862663787014, -14.425540696936805, -23.022351518217974, 14.40804562675872, -17.2831808012725], 
        [0.034737562555962845, -0.3516941047655973, -0.6345849210042325, -0.8668966372716224, 0.6857838460621623, -0.6267808716121616]
    ], 
    [
        [-1.3676167741358436, 3.841506639300454, 8.696224424573124, 13.911360725768903, -8.523488603608763, 10.41830321211924], 
        [0.08180938884148035, -0.06645282069388007, -0.2576818195824298, -0.38308178793306363, 0.1823641921256916, -0.29115317801735385], 
        [1.3403746158746999, -3.7993074158800417, -8.577751448547735, -13.74293610135656, 8.39432684542769, -10.282062052855041], 
        [-0.05456723058033479, 0.02425359727346243, 0.13920884355702898, 0.21465716352070174, -0.053202433944605554, 0.15491201875313937]
    ]
]

dV_mha = [
    [
        [-3.300007541168327, -2.6883983669820193, -2.076789192795712, -2.076789192795712, -2.6883983669820193, -3.300007541168327], 
        [-0.45889456374509696, -0.38301003369961767, -0.30712550365413827, -0.30712550365413827, -0.38301003369961767, -0.45889456374509696], 
        [-8.003233847943775, -6.4686569293795, -4.934080010815223, -4.934080010815223, -6.4686569293795, -8.003233847943775], 
        [-0.3128640471428013, -0.2849346699388634, -0.2570052927349254, -0.2570052927349254, -0.2849346699388634, -0.3128640471428013]
    ], 
    [
        [-2.5116124314239863, -2.257451634201, -2.0032908369780125, -2.0032908369780125, -2.257451634201, -2.5116124314239863], 
        [0.07985281718609225, -0.0925307002750879, -0.26491421773626805, -0.26491421773626805, -0.0925307002750879, 0.07985281718609225], 
        [-8.42598946900693, -7.061432626254836, -5.696875783502742, -5.696875783502742, -7.061432626254836, -8.42598946900693], 
        [0.2177490832448254, -0.013585039269075852, -0.24491916178297712, -0.24491916178297712, -0.013585039269075852, 0.2177490832448254]
    ]
]


X_bb = [
    [
        [1, 2, 3, 4, 5, 6], 
        [-2, -1, 0, 1, 2, 3], 
        [2, 1, 0, 0, 1, 2], 
        [-2, -1, 0, 0, -1, -2]
    ], 
    [
        [3, 2, 2, 1, 2, 2], 
        [1, 1, 1, 1, 1, 1], 
        [1, 1, 1, -1, -1, -1], 
        [0, 0, 0, 0, 1, 2]
    ]
]

Y_bb = [
    [
        [1.5865712833303363, 0.9151485124345495, -0.05178719322443262, -0.2277912205466292, -1.3576936181706079, -0.8644477638232168], 
        [1.586571283340983, 0.9151485124406902, -0.05178719322477968, -0.22779122054815742, -1.357693618179718, -0.8644477638290178], 
        [1.6833907104712522, 0.8807539342983381, -0.23430163785582353, -0.3669702323856616, -1.3518123074549369, -0.6110604670731687], 
        [-1.6876321873757525, -0.5448958884594387, 0.9068219027563433, 0.8372353633265569, 1.02278790111644, -0.5343170913641493]
    ], 
    [
        [1.7019008426278066, 0.8405939338581229, -0.09459162759403385, -0.4528721779633613, -1.307922991932866, -0.6871079789956679], 
        [1.5865712832963756, 0.9151485124149605, -0.05178719322332392, -0.22779122054175308, -1.3576936181415458, -0.8644477638047134], 
        [1.475042683610685, 0.9866101009357191, 0.1516041616728688, -0.5209276904616236, -1.4748027179139316, -0.6175265378437181], 
        [1.681230209768102, 0.8828888181741796, -0.24539727798233177, -0.4888791330552077, -1.3734406610339256, -0.45640195587081656]
    ]
]

dX_bb = [
    [
        [-1.3745031612980279, -0.5177390071217649, -0.7151519030028666, -0.09740347701727714, -0.32252325322195574, -4.550599727503155], 
        [0.9031988822559032, 0.7335151947707428, 2.32424676275725, -2.280733958052671, -14.386422072787031, 13.407628315255721], 
        [-2.3807278438544426, 1.8879201390816618, 6.434814640885567, 10.360596056523168, -9.505747623756669, 8.090491769583155], 
        [-7.133878604541375, -16.33439945203471, -20.90726937563502, -24.7995976173882, -9.099940545046172, -15.730447288927323]
    ], 
    [
        [1.8449377195461074, -1.3454898298705853, -3.2848532803766908, -8.430042214621437, -5.780080320452873, 6.848180340053119], 
        [3.887344506609547, 3.5233818469747407, 0.13540458370518682, -7.843575279637298, -17.998836691643678, 19.021670434399766], 
        [-0.337993262297526, 0.3815002217975666, -0.3520274257090451, -2.281510914630397, -1.958183882222133, 1.3025120449529393], 
        [-0.36723707602076017, 1.8992473952580118, -3.1390001452637066, -1.981725624446097, 0.1776946916343055, 1.7524069674471159]
    ]
]

token_ids = [ # [0 - 9] 10 tokns max
    [1, 1, 2, 3, 0],
    [5, 7, 2, 0, 0]
]

segment_ids = [ # [0 - 2] 2 segments max
    [0, 0, 0, 0, 1],
    [0, 0, 0, 1, 1]
]

mask = [
    [True, True, True, True, True],
    [True, True, True, True, False],
]

Yb = [
    [
        [1.5378822626358468, 0.9064088506372777, -0.2707593776262893, -0.1654410042296372, -1.5941038291617768, -0.4139869022554214], 
        [1.5379292876988333, 0.9063524313591834, -0.27077723254421715, -0.16545129237951228, -1.5940935089478412, -0.4139596851864462], 
        [1.6229403168808167, 0.7712473255021083, -0.3332671285335797, -0.20963881323058647, -1.597393243787815, -0.2538884568309435], 
        [1.5621308413394936, 0.8901330235567276, -0.34201091014725865, -0.19150879440441615, -1.5810104205629378, -0.33773373978160937], 
        [1.6233782117876623, 0.8246759093348819, -0.28201637055394335, -0.24087132414211598, -1.551549643023983, -0.373616783402502]
    ], 
    [
        [1.625427255551851, 0.7479883989812197, -0.34652240547309465, -0.2359886800274051, -1.6092312630256662, -0.1816733060069048], 
        [1.5192463429042793, 0.8473241438875971, -0.35694592756368765, -0.22413005192703075, -1.6680511267134968, -0.11744338058766118], 
        [1.6241535444944388, 0.7772762806562901, -0.32403967699348524, -0.2106229460695564, -1.591445323633711, -0.2753218784539766], 
        [1.6237571056177367, 0.8285570436984712, -0.27419739283306344, -0.24076532669296777, -1.5461631169016903, -0.39118831288848616], 
        [1.7892639406585276, 0.6343514637274833, -0.308408278392091, -0.4519091633835598, -1.428898468282145, -0.2343994943282148]
    ]
]

dY_b = [
    [
        [1, 2, 3, -1, -2, -3], 
        [1, 1, 1, 1, 1, 1], 
        [-1, -1, -1, -1, -1, -1], 
        [1, -1, 1, -1, 1, -1], 
        [1, 2, 1, 2, 1, 2]
    ], 
    [
        [2, 1, -1, -1, -2, -1], 
        [1.5, 0.5, -0.5, -0.5, -1.5, -0.5], 
        [2, 1, -0.5, -1, 2, -1], 
        [1, 1, -0.25, -2, 3, -2], 
        [-1, 0.5, -0.5, -0.5, -1.5, -0.5]
    ]
]

token_embedding_b = [
    [1.0125357601620903, 0.4435434298823442, 0.2537281711342962, 0.11068205901530809, 0.11292358518120377, 0.06639498352513777], 
    [0.5305794081544629, 0.5829663916107107, 0.36280577577910844, 0.19913400695150138, 0.28912263265760824, 0.03492722766224237], 
    [1.0896509553005314, 0.09215410602766834, 0.1276182302199772, 0.12628355092376903, 0.05501430230880528, 0.5100242545105117], 
    [0.2290037475521259, 0.3010479969027531, 0.21109619860644094, 0.26139475393334805, 0.47979110521348106, 0.5158587819775449], 
    [0.2, 0.2, 0.2, 0.2, 0.2, 1], 
    [1.215158324694423, -0.028157286120614678, -2.6417643768215807e-05, 0.0017872319578719636, 0.012322308101178904, 0.7996856947631071], 
    [0.3, 0.2, 0.3, 0.2, 0.6, 0.4], 
    [0.12171964038443331, 0.07882861857585773, 0.1943416160999555, 0.19471553661874538, 0.31545677805529043, 1.0966054140473052], 
    [0.1, 0.2, 0.3, 0.4, 0.5, 0.5], 
    [0.6, 0.5, 0.4, 0.3, 0.2, 0]
]

position_embedding_b = [
    [0.13702488949353211, 0.15709178477082192, -0.027477565344536863, 0.05816100074290469, 0.14089834011161562, 0.13506706397801918], 
    [0.23043248373978722, 0.1765459392951318, 0.18459853957983263, 0.18747577478521404, 0.22600337870246195, 0.1961512724946352], 
    [0.2896509553005311, 0.2921541060276683, 0.3276182302199772, 0.32628355092376904, 0.2550143023088053, 0.31002425451051163], 
    [0.36863026839686364, 0.46725935016345854, 0.36943228601602285, 0.4374019040645536, 0.31886429934041705, 0.4383890475749315], 
    [0.5229092393173526, 0.42733207662163875, 0.49539208372471427, 0.48467490888410253, 0.5738503910542677, 0.4938647179277511]
]

segment_embedding_b = [
    [0.036112076085976344, 0.1768398269963751, -0.1541645969382861, 0.0833150803852358, 0.0017071263363639053, 0.1571013729607109], 
    [0.2125357601620903, -0.056456570117655744, 0.2037281711342962, 0.010682059015308089, 0.21292358518120377, 0.016394983525137772]
]



def test_split_merge_heads_identity():
    X = [[[i + j*10 + k*100 for i in range(8)] for j in range(2)] for k in range(1)]
    split = split_heads(X, 2, 4)
    merged = merge_heads(split)
    assert merged == X

def test_construct_mask_basic():
    input_mask = [[True, False, True]]
    expected = [[[True, False, True], [False, False, False], [True, False, True]]]
    assert construct_mask(input_mask) == expected


def test_MultiheadAttention():
    mha = get_mha()
    assert mha.head_dim == 3

    Y = mha.forward(Q_mha, K_mha, V_mha)

    assert Y == Y_mha

    dQ, dK, dV = mha.backward(dY_mha, alpha=0.1)

    assert dQ == dQ_mha
    assert dK == dK_mha
    assert dV == dV_mha


def test_BertBlock():
    bb = get_bb()

    Y = bb.forward(X_bb)

    assert Y == Y_bb

    dX = bb.backward(dY_mha, alpha=0.1)

    assert dX == dX_bb


def test_Bert_cr():
    b = Bert(10, 5, 6, 2, 4, 2)

    assert len(b.token_embedding.w) == 10
    assert len(b.token_embedding.w[0]) == 6
    
    assert len(b.position_embedding.w) == 5
    assert len(b.position_embedding.w[0]) == 6

    assert len(b.segment_embedding.w) == 2
    assert len(b.position_embedding.w[0]) == 6

    assert len(b.blocks[0].ffn1.w) == 4
    assert len(b.blocks[0].ffn1.w[0]) == 6
    assert len(b.blocks[0].ffn2.w) == 6
    assert len(b.blocks[0].ffn2.w[0]) == 4

    assert len(b.blocks[1].ffn1.w) == 4
    assert len(b.blocks[1].ffn1.w[0]) == 6
    assert len(b.blocks[1].ffn2.w) == 6
    assert len(b.blocks[1].ffn2.w[0]) == 4


def test_Bert():
    b = get_b()

    Y = b.forward(token_ids, segment_ids, mask=mask)

    assert Y == Yb

    b.backward(dY_b, alpha=0.1)

    assert b.token_embedding.w == token_embedding_b
    assert b.position_embedding.w == position_embedding_b
    assert b.segment_embedding.w == segment_embedding_b

